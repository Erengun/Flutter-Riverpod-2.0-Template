// Mocks generated by Mockito 5.4.5 from annotations
// in flutter_riverpod_template/test/features/login_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_riverpod_template/features/authentication/data/authentication_repository.dart'
    as _i4;
import 'package:flutter_riverpod_template/features/authentication/data/hive/user_repository.dart'
    as _i6;
import 'package:flutter_riverpod_template/features/authentication/domain/login_request.dart'
    as _i7;
import 'package:flutter_riverpod_template/features/authentication/domain/login_response.dart'
    as _i2;
import 'package:flutter_riverpod_template/features/authentication/domain/register_response.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLoginResponse_0 extends _i1.SmartFake implements _i2.LoginResponse {
  _FakeLoginResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRegisterResponse_1 extends _i1.SmartFake
    implements _i3.RegisterResponse {
  _FakeRegisterResponse_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthenticationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationRepository extends _i1.Mock
    implements _i4.AuthenticationRepository {
  MockAuthenticationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.LoginResponse> login(String? email, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#login, [email, password]),
            returnValue: _i5.Future<_i2.LoginResponse>.value(
              _FakeLoginResponse_0(
                this,
                Invocation.method(#login, [email, password]),
              ),
            ),
          )
          as _i5.Future<_i2.LoginResponse>);

  @override
  _i5.Future<_i3.RegisterResponse> register(String? email, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#register, [email, password]),
            returnValue: _i5.Future<_i3.RegisterResponse>.value(
              _FakeRegisterResponse_1(
                this,
                Invocation.method(#register, [email, password]),
              ),
            ),
          )
          as _i5.Future<_i3.RegisterResponse>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i6.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> cacheUser(_i7.LoginCredentials? user) =>
      (super.noSuchMethod(
            Invocation.method(#cacheUser, [user]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i7.LoginCredentials?> getCachedUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedUser, []),
            returnValue: _i5.Future<_i7.LoginCredentials?>.value(),
          )
          as _i5.Future<_i7.LoginCredentials?>);

  @override
  _i5.Future<void> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
