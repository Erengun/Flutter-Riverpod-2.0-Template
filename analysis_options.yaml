include: lint_rules.yaml
analyzer:
  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true
  plugins:
    - custom_lint
  exclude: 
    [build/**, lib/**.freezed.dart, lib/**.g.dart]
  errors:
    # Otherwise cause the import of all_lint_rules to warn because of some rules conflicts.
    # We explicitly enabled even conflicting rules and are fixing the conflict
    # in this file
    included_file_warning: ignore
    # false positive when using Freezed
    invalid_annotation_target: ignore
    # I prefer specifying a parameter on a widget even if they are unused (such as Key)
    # for the sake of consistency.
    unused_element_parameter: false
    unrecognized_error_code: ignore

linter:
  rules:
    # Why i have to sort deps lol
    sort_pub_dependencies: false
    # Unnecessary, for reading
    avoid_types_on_closure_parameters: false
    # I dont like its lint
    require_trailing_commas: false
    # conflicts with `prefer_final_locals`
    unnecessary_final: false
    # I dont find this useful, and it conflicts with `prefer_final_locals`
    omit_local_variable_types: false
    # Conflicts with build method of widgets
    prefer_final_parameters: false
    # Not for this project, which is a library.
    public_member_api_docs: false

    # Maybe later. Too many to fix right now.
    document_ignores: false

    # False positive for custom enum-like classes (such as Flutter's "Colors")
    avoid_classes_with_only_static_members: false

    # False positive when the future is returned by the function
    discarded_futures: false

    # Too verbose with little value, and this is taken care of by the Flutter devtool anyway.
    diagnostic_describe_all_properties: false

    # Personal preference. I prefer "if (bool) return;" over having it in multiple lines
    always_put_control_body_on_new_line: false

    # Conflicts with `prefer_single_quotes`
    # Single quotes are easier to type and don't compromise on readability.
    prefer_double_quotes: false

    # Not quite suitable for Flutter, which may have a `build` method with a single
    # return, but that return is still complex enough that a "body" is worth it.
    prefer_expression_function_bodies: false

    # Conflicts with the convention used by flutter, which puts `Key key`
    # and `@required Widget child` last.
    always_put_required_named_parameters_first: false

    # This project doesn't use Flutter-style todos
    flutter_style_todos: false

    # There are situations where we voluntarily want to catch everything,
    # especially as a library.
    avoid_catches_without_on_clauses: false

    # Boring as it sometimes force a line of 81 characters to be split in two.
    # As long as we try to respect that 80 characters limit, going slightly
    # above is fine.
    lines_longer_than_80_chars: false

    # Conflicts with disabling `always_specify_types`
    avoid_annotating_with_dynamic: false

    # conflicts with `prefer_relative_imports`
    always_use_package_imports: false